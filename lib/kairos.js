// Generated by LiveScript 1.4.0
var fetch, Validator, schemas, v, Karios;
fetch = require('node-fetch');
Validator = require('jsonschema').Validator;
schemas = require('./schemas');
v = new Validator();
Karios = (function(){
  Karios.displayName = 'Karios';
  var post, prototype = Karios.prototype, constructor = Karios;
  function Karios(app_id, app_key){
    this.auth = {
      app_id: app_id,
      app_key: app_key
    };
  }
  post = function(url, headers, params){
    return fetch(url, (import$({
      method: 'POST',
      headers: (import$({
        'Content-Type': 'application/json'
      }, headers))
    }, function(){
      if (params) {
        return {
          body: JSON.stringify(params)
        };
      } else {
        return {};
      }
    }()))).then(function(res){
      if (res.status === 403) {
        return {
          status: res.status,
          body: null
        };
      }
      return res.json().then(function(result){
        return {
          status: res.status,
          body: result
        };
      });
    });
  };
  prototype.enroll = function(params){
    var this$ = this;
    return new Promise(function(resolve, reject){
      var valid, url;
      valid = v.validate(params, schemas.ENROLL);
      if (valid.errors.length) {
        return reject(valid.errors);
      }
      url = 'https://api.kairos.com/enroll';
      return resolve(post(url, this$.auth, params));
    });
  };
  prototype.recognize = function(params){
    var this$ = this;
    return new Promise(function(resolve, reject){
      var valid, url;
      valid = v.validate(params, schemas.RECOGNIZE);
      if (valid.errors.length) {
        return reject(valid.errors);
      }
      url = 'https://api.kairos.com/recognize';
      return resolve(post(url, this$.auth, params));
    });
  };
  prototype.detect = function(params){
    var this$ = this;
    return new Promise(function(resolve, reject){
      var valid, url;
      valid = v.validate(params, schemas.DETECT);
      if (valid.errors.length) {
        return reject(valid.errors);
      }
      url = 'https://api.kairos.com/detect';
      return resolve(post(url, this$.auth, params));
    });
  };
  prototype.galleryListAll = function(){
    var this$ = this;
    return new Promise(function(resolve, reject){
      var url;
      url = 'https://api.kairos.com/gallery/list_all';
      return resolve(post(url, this$.auth));
    });
  };
  prototype.galleryView = function(params){
    var this$ = this;
    return new Promise(function(resolve, reject){
      var valid, url;
      valid = v.validate(params, schemas.GALLERY_VIEW);
      if (valid.errors.length) {
        return reject(valid.errors);
      }
      url = 'https://api.kairos.com/gallery/view';
      return resolve(post(url, this$.auth, params));
    });
  };
  prototype.galleryRemove = function(params){
    var this$ = this;
    return new Promise(function(resolve, reject){
      var valid, url;
      valid = v.validate(params, schemas.GALLERY_REMOVE);
      if (valid.errors.length) {
        return reject(valid.errors);
      }
      url = 'https://api.kairos.com/gallery/remove';
      return resolve(post(url, this$.auth, params));
    });
  };
  prototype.galleryRemoveSubject = function(params){
    var this$ = this;
    return new Promise(function(resolve, reject){
      var valid, url;
      valid = v.validate(params, schemas.GALLERY_REMOVE_SUBJECT);
      if (valid.errors.length) {
        return reject(valid.errors);
      }
      url = 'https://api.kairos.com/gallery/remove_subject';
      return resolve(post(url, this$.auth, params));
    });
  };
  return Karios;
}());
module.exports = Karios;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}